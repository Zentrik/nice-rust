<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="1782"><g><title>[libc-2.31.so] (19 samples, 1.07%)</title><rect x="0.0000%" y="485" width="1.0662%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="19"/><text x="0.2500%" y="495.50"></text></g><g><title>__libc_malloc (6 samples, 0.34%)</title><rect x="1.0662%" y="485" width="0.3367%" height="15" fill="rgb(217,0,24)" fg:x="19" fg:w="6"/><text x="1.3162%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="1.4029%" y="485" width="0.0561%" height="15" fill="rgb(221,193,54)" fg:x="25" fg:w="1"/><text x="1.6529%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="1.4029%" y="469" width="0.0561%" height="15" fill="rgb(248,212,6)" fg:x="25" fg:w="1"/><text x="1.6529%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.11%)</title><rect x="1.4590%" y="485" width="0.1122%" height="15" fill="rgb(208,68,35)" fg:x="26" fg:w="2"/><text x="1.7090%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.28%)</title><rect x="1.5713%" y="485" width="0.2806%" height="15" fill="rgb(232,128,0)" fg:x="28" fg:w="5"/><text x="1.8213%" y="495.50"></text></g><g><title>alloc::slice::merge_sort (4 samples, 0.22%)</title><rect x="1.8519%" y="485" width="0.2245%" height="15" fill="rgb(207,160,47)" fg:x="33" fg:w="4"/><text x="2.1019%" y="495.50"></text></g><g><title>cfree (1 samples, 0.06%)</title><rect x="2.0763%" y="485" width="0.0561%" height="15" fill="rgb(228,23,34)" fg:x="37" fg:w="1"/><text x="2.3263%" y="495.50"></text></g><g><title>num_bigint::biguint::multiplication::&lt;impl core::ops::arith::Mul&lt;&amp;num_bigint::biguint::BigUint&gt; for &amp;num_bigint::biguint::BigUint&gt;::mul (2 samples, 0.11%)</title><rect x="2.1324%" y="485" width="0.1122%" height="15" fill="rgb(218,30,26)" fg:x="38" fg:w="2"/><text x="2.3824%" y="495.50"></text></g><g><title>num_bigint::biguint::multiplication::&lt;impl core::ops::arith::MulAssign&lt;&amp;num_bigint::biguint::BigUint&gt; for num_bigint::biguint::BigUint&gt;::mul_assign (1 samples, 0.06%)</title><rect x="2.2447%" y="485" width="0.0561%" height="15" fill="rgb(220,122,19)" fg:x="40" fg:w="1"/><text x="2.4947%" y="495.50"></text></g><g><title>num_bigint::biguint::multiplication::scalar_mul (5 samples, 0.28%)</title><rect x="2.3008%" y="485" width="0.2806%" height="15" fill="rgb(250,228,42)" fg:x="41" fg:w="5"/><text x="2.5508%" y="495.50"></text></g><g><title>[[heap]] (52 samples, 2.92%)</title><rect x="0.0000%" y="501" width="2.9181%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="52"/><text x="0.2500%" y="511.50">[[..</text></g><g><title>num_bigint::biguint::power::&lt;impl num_traits::pow::Pow&lt;u32&gt; for num_bigint::biguint::BigUint&gt;::pow (6 samples, 0.34%)</title><rect x="2.5814%" y="485" width="0.3367%" height="15" fill="rgb(216,20,37)" fg:x="46" fg:w="6"/><text x="2.8314%" y="495.50"></text></g><g><title>[libc-2.31.so] (6 samples, 0.34%)</title><rect x="2.9181%" y="485" width="0.3367%" height="15" fill="rgb(206,188,39)" fg:x="52" fg:w="6"/><text x="3.1681%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.06%)</title><rect x="3.2548%" y="485" width="0.0561%" height="15" fill="rgb(217,207,13)" fg:x="58" fg:w="1"/><text x="3.5048%" y="495.50"></text></g><g><title>cfree (1 samples, 0.06%)</title><rect x="3.3109%" y="485" width="0.0561%" height="15" fill="rgb(231,73,38)" fg:x="59" fg:w="1"/><text x="3.5609%" y="495.50"></text></g><g><title>[[stack]] (11 samples, 0.62%)</title><rect x="2.9181%" y="501" width="0.6173%" height="15" fill="rgb(225,20,46)" fg:x="52" fg:w="11"/><text x="3.1681%" y="511.50"></text></g><g><title>num_bigint::biguint::multiplication::scalar_mul (3 samples, 0.17%)</title><rect x="3.3670%" y="485" width="0.1684%" height="15" fill="rgb(210,31,41)" fg:x="60" fg:w="3"/><text x="3.6170%" y="495.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.06%)</title><rect x="3.5354%" y="501" width="0.0561%" height="15" fill="rgb(221,200,47)" fg:x="63" fg:w="1"/><text x="3.7854%" y="511.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.06%)</title><rect x="3.5354%" y="485" width="0.0561%" height="15" fill="rgb(226,26,5)" fg:x="63" fg:w="1"/><text x="3.7854%" y="495.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.06%)</title><rect x="3.5354%" y="469" width="0.0561%" height="15" fill="rgb(249,33,26)" fg:x="63" fg:w="1"/><text x="3.7854%" y="479.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.06%)</title><rect x="3.5354%" y="453" width="0.0561%" height="15" fill="rgb(235,183,28)" fg:x="63" fg:w="1"/><text x="3.7854%" y="463.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.06%)</title><rect x="3.5354%" y="437" width="0.0561%" height="15" fill="rgb(221,5,38)" fg:x="63" fg:w="1"/><text x="3.7854%" y="447.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.06%)</title><rect x="3.5354%" y="421" width="0.0561%" height="15" fill="rgb(247,18,42)" fg:x="63" fg:w="1"/><text x="3.7854%" y="431.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.06%)</title><rect x="3.5354%" y="405" width="0.0561%" height="15" fill="rgb(241,131,45)" fg:x="63" fg:w="1"/><text x="3.7854%" y="415.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.06%)</title><rect x="3.5354%" y="389" width="0.0561%" height="15" fill="rgb(249,31,29)" fg:x="63" fg:w="1"/><text x="3.7854%" y="399.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.06%)</title><rect x="3.5354%" y="373" width="0.0561%" height="15" fill="rgb(225,111,53)" fg:x="63" fg:w="1"/><text x="3.7854%" y="383.50"></text></g><g><title>[ld-2.31.so] (1 samples, 0.06%)</title><rect x="3.5354%" y="357" width="0.0561%" height="15" fill="rgb(238,160,17)" fg:x="63" fg:w="1"/><text x="3.7854%" y="367.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="3.5354%" y="341" width="0.0561%" height="15" fill="rgb(214,148,48)" fg:x="63" fg:w="1"/><text x="3.7854%" y="351.50"></text></g><g><title>do_syscall_64 (1 samples, 0.06%)</title><rect x="3.5354%" y="325" width="0.0561%" height="15" fill="rgb(232,36,49)" fg:x="63" fg:w="1"/><text x="3.7854%" y="335.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.06%)</title><rect x="3.5354%" y="309" width="0.0561%" height="15" fill="rgb(209,103,24)" fg:x="63" fg:w="1"/><text x="3.7854%" y="319.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.06%)</title><rect x="3.5354%" y="293" width="0.0561%" height="15" fill="rgb(229,88,8)" fg:x="63" fg:w="1"/><text x="3.7854%" y="303.50"></text></g><g><title>do_mmap (1 samples, 0.06%)</title><rect x="3.5354%" y="277" width="0.0561%" height="15" fill="rgb(213,181,19)" fg:x="63" fg:w="1"/><text x="3.7854%" y="287.50"></text></g><g><title>mmap_region (1 samples, 0.06%)</title><rect x="3.5354%" y="261" width="0.0561%" height="15" fill="rgb(254,191,54)" fg:x="63" fg:w="1"/><text x="3.7854%" y="271.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.17%)</title><rect x="3.5915%" y="501" width="0.1684%" height="15" fill="rgb(241,83,37)" fg:x="64" fg:w="3"/><text x="3.8415%" y="511.50"></text></g><g><title>[libc-2.31.so] (38 samples, 2.13%)</title><rect x="3.7598%" y="485" width="2.1324%" height="15" fill="rgb(233,36,39)" fg:x="67" fg:w="38"/><text x="4.0098%" y="495.50">[..</text></g><g><title>__libc_malloc (11 samples, 0.62%)</title><rect x="5.8923%" y="485" width="0.6173%" height="15" fill="rgb(226,3,54)" fg:x="105" fg:w="11"/><text x="6.1423%" y="495.50"></text></g><g><title>__rdl_realloc (3 samples, 0.17%)</title><rect x="6.5095%" y="485" width="0.1684%" height="15" fill="rgb(245,192,40)" fg:x="116" fg:w="3"/><text x="6.7595%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.06%)</title><rect x="6.6218%" y="469" width="0.0561%" height="15" fill="rgb(238,167,29)" fg:x="118" fg:w="1"/><text x="6.8718%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.11%)</title><rect x="6.6779%" y="485" width="0.1122%" height="15" fill="rgb(232,182,51)" fg:x="119" fg:w="2"/><text x="6.9279%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.56%)</title><rect x="6.7901%" y="485" width="0.5612%" height="15" fill="rgb(231,60,39)" fg:x="121" fg:w="10"/><text x="7.0401%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.34%)</title><rect x="7.3513%" y="485" width="0.3367%" height="15" fill="rgb(208,69,12)" fg:x="131" fg:w="6"/><text x="7.6013%" y="495.50"></text></g><g><title>cfree (4 samples, 0.22%)</title><rect x="7.6880%" y="485" width="0.2245%" height="15" fill="rgb(235,93,37)" fg:x="137" fg:w="4"/><text x="7.9380%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.34%)</title><rect x="7.9125%" y="485" width="0.3367%" height="15" fill="rgb(213,116,39)" fg:x="141" fg:w="6"/><text x="8.1625%" y="495.50"></text></g><g><title>nice_rust::get_num_uniques (3 samples, 0.17%)</title><rect x="8.2492%" y="485" width="0.1684%" height="15" fill="rgb(222,207,29)" fg:x="147" fg:w="3"/><text x="8.4992%" y="495.50"></text></g><g><title>nice_rust::main (1 samples, 0.06%)</title><rect x="8.4175%" y="485" width="0.0561%" height="15" fill="rgb(206,96,30)" fg:x="150" fg:w="1"/><text x="8.6675%" y="495.50"></text></g><g><title>num_bigint::biguint::BigUint::pow (15 samples, 0.84%)</title><rect x="8.4736%" y="485" width="0.8418%" height="15" fill="rgb(218,138,4)" fg:x="151" fg:w="15"/><text x="8.7236%" y="495.50"></text></g><g><title>num_bigint::biguint::convert::to_radix_le (7 samples, 0.39%)</title><rect x="9.3154%" y="485" width="0.3928%" height="15" fill="rgb(250,191,14)" fg:x="166" fg:w="7"/><text x="9.5654%" y="495.50"></text></g><g><title>num_bigint::biguint::multiplication::&lt;impl core::ops::arith::Mul&lt;&amp;num_bigint::biguint::BigUint&gt; for &amp;num_bigint::biguint::BigUint&gt;::mul (12 samples, 0.67%)</title><rect x="9.7082%" y="485" width="0.6734%" height="15" fill="rgb(239,60,40)" fg:x="173" fg:w="12"/><text x="9.9582%" y="495.50"></text></g><g><title>num_bigint::biguint::multiplication::&lt;impl core::ops::arith::MulAssign&lt;&amp;num_bigint::biguint::BigUint&gt; for num_bigint::biguint::BigUint&gt;::mul_assign (1 samples, 0.06%)</title><rect x="10.3816%" y="485" width="0.0561%" height="15" fill="rgb(206,27,48)" fg:x="185" fg:w="1"/><text x="10.6316%" y="495.50"></text></g><g><title>num_bigint::biguint::multiplication::scalar_mul (6 samples, 0.34%)</title><rect x="10.4377%" y="485" width="0.3367%" height="15" fill="rgb(225,35,8)" fg:x="186" fg:w="6"/><text x="10.6877%" y="495.50"></text></g><g><title>num_bigint::biguint::power::&lt;impl num_traits::pow::Pow&lt;u32&gt; for num_bigint::biguint::BigUint&gt;::pow (11 samples, 0.62%)</title><rect x="10.7744%" y="485" width="0.6173%" height="15" fill="rgb(250,213,24)" fg:x="192" fg:w="11"/><text x="11.0244%" y="495.50"></text></g><g><title>[unknown] (142 samples, 7.97%)</title><rect x="3.7598%" y="501" width="7.9686%" height="15" fill="rgb(247,123,22)" fg:x="67" fg:w="142"/><text x="4.0098%" y="511.50">[unknown]</text></g><g><title>realloc (6 samples, 0.34%)</title><rect x="11.3917%" y="485" width="0.3367%" height="15" fill="rgb(231,138,38)" fg:x="203" fg:w="6"/><text x="11.6417%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (64 samples, 3.59%)</title><rect x="12.4579%" y="261" width="3.5915%" height="15" fill="rgb(231,145,46)" fg:x="222" fg:w="64"/><text x="12.7079%" y="271.50">core..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.67%)</title><rect x="15.3760%" y="245" width="0.6734%" height="15" fill="rgb(251,118,11)" fg:x="274" fg:w="12"/><text x="15.6260%" y="255.50"></text></g><g><title>[libc-2.31.so] (63 samples, 3.54%)</title><rect x="24.8036%" y="245" width="3.5354%" height="15" fill="rgb(217,147,25)" fg:x="442" fg:w="63"/><text x="25.0536%" y="255.50">[li..</text></g><g><title>__rdl_dealloc (2 samples, 0.11%)</title><rect x="28.3389%" y="245" width="0.1122%" height="15" fill="rgb(247,81,37)" fg:x="505" fg:w="2"/><text x="28.5889%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.11%)</title><rect x="28.3389%" y="229" width="0.1122%" height="15" fill="rgb(209,12,38)" fg:x="505" fg:w="2"/><text x="28.5889%" y="239.50"></text></g><g><title>__rdl_realloc (3 samples, 0.17%)</title><rect x="29.1246%" y="213" width="0.1684%" height="15" fill="rgb(227,1,9)" fg:x="519" fg:w="3"/><text x="29.3746%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.11%)</title><rect x="29.1807%" y="197" width="0.1122%" height="15" fill="rgb(248,47,43)" fg:x="520" fg:w="2"/><text x="29.4307%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (41 samples, 2.30%)</title><rect x="28.4512%" y="245" width="2.3008%" height="15" fill="rgb(221,10,30)" fg:x="507" fg:w="41"/><text x="28.7012%" y="255.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (32 samples, 1.80%)</title><rect x="28.9562%" y="229" width="1.7957%" height="15" fill="rgb(210,229,1)" fg:x="516" fg:w="32"/><text x="29.2062%" y="239.50">a..</text></g><g><title>realloc (26 samples, 1.46%)</title><rect x="29.2929%" y="213" width="1.4590%" height="15" fill="rgb(222,148,37)" fg:x="522" fg:w="26"/><text x="29.5429%" y="223.50"></text></g><g><title>[libc-2.31.so] (10 samples, 0.56%)</title><rect x="30.1908%" y="197" width="0.5612%" height="15" fill="rgb(234,67,33)" fg:x="538" fg:w="10"/><text x="30.4408%" y="207.50"></text></g><g><title>__libc_malloc (21 samples, 1.18%)</title><rect x="31.7059%" y="213" width="1.1785%" height="15" fill="rgb(247,98,35)" fg:x="565" fg:w="21"/><text x="31.9559%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (43 samples, 2.41%)</title><rect x="30.7520%" y="245" width="2.4130%" height="15" fill="rgb(247,138,52)" fg:x="548" fg:w="43"/><text x="31.0020%" y="255.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (34 samples, 1.91%)</title><rect x="31.2570%" y="229" width="1.9080%" height="15" fill="rgb(213,79,30)" fg:x="557" fg:w="34"/><text x="31.5070%" y="239.50">a..</text></g><g><title>__rdl_alloc (5 samples, 0.28%)</title><rect x="32.8844%" y="213" width="0.2806%" height="15" fill="rgb(246,177,23)" fg:x="586" fg:w="5"/><text x="33.1344%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.28%)</title><rect x="32.8844%" y="197" width="0.2806%" height="15" fill="rgb(230,62,27)" fg:x="586" fg:w="5"/><text x="33.1344%" y="207.50"></text></g><g><title>[libc-2.31.so] (45 samples, 2.53%)</title><rect x="57.3513%" y="229" width="2.5253%" height="15" fill="rgb(216,154,8)" fg:x="1022" fg:w="45"/><text x="57.6013%" y="239.50">[l..</text></g><g><title>__libc_malloc (12 samples, 0.67%)</title><rect x="59.8765%" y="229" width="0.6734%" height="15" fill="rgb(244,35,45)" fg:x="1067" fg:w="12"/><text x="60.1265%" y="239.50"></text></g><g><title>__libc_malloc (12 samples, 0.67%)</title><rect x="61.3356%" y="197" width="0.6734%" height="15" fill="rgb(251,115,12)" fg:x="1093" fg:w="12"/><text x="61.5856%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 1.80%)</title><rect x="60.5499%" y="229" width="1.7957%" height="15" fill="rgb(240,54,50)" fg:x="1079" fg:w="32"/><text x="60.7999%" y="239.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 1.29%)</title><rect x="61.0550%" y="213" width="1.2907%" height="15" fill="rgb(233,84,52)" fg:x="1088" fg:w="23"/><text x="61.3050%" y="223.50"></text></g><g><title>__rdl_alloc (6 samples, 0.34%)</title><rect x="62.0090%" y="197" width="0.3367%" height="15" fill="rgb(207,117,47)" fg:x="1105" fg:w="6"/><text x="62.2590%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.34%)</title><rect x="62.0090%" y="181" width="0.3367%" height="15" fill="rgb(249,43,39)" fg:x="1105" fg:w="6"/><text x="62.2590%" y="191.50"></text></g><g><title>alloc::slice::merge_sort (527 samples, 29.57%)</title><rect x="33.1650%" y="245" width="29.5735%" height="15" fill="rgb(209,38,44)" fg:x="591" fg:w="527"/><text x="33.4150%" y="255.50">alloc::slice::merge_sort</text></g><g><title>cfree (7 samples, 0.39%)</title><rect x="62.3457%" y="229" width="0.3928%" height="15" fill="rgb(236,212,23)" fg:x="1111" fg:w="7"/><text x="62.5957%" y="239.50"></text></g><g><title>cfree (24 samples, 1.35%)</title><rect x="62.7385%" y="245" width="1.3468%" height="15" fill="rgb(242,79,21)" fg:x="1118" fg:w="24"/><text x="62.9885%" y="255.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.17%)</title><rect x="65.0393%" y="229" width="0.1684%" height="15" fill="rgb(211,96,35)" fg:x="1159" fg:w="3"/><text x="65.2893%" y="239.50"></text></g><g><title>__libc_malloc (14 samples, 0.79%)</title><rect x="65.2076%" y="229" width="0.7856%" height="15" fill="rgb(253,215,40)" fg:x="1162" fg:w="14"/><text x="65.4576%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="65.9933%" y="229" width="0.0561%" height="15" fill="rgb(211,81,21)" fg:x="1176" fg:w="1"/><text x="66.2433%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="65.9933%" y="213" width="0.0561%" height="15" fill="rgb(208,190,38)" fg:x="1176" fg:w="1"/><text x="66.2433%" y="223.50"></text></g><g><title>[libc-2.31.so] (43 samples, 2.41%)</title><rect x="68.2941%" y="213" width="2.4130%" height="15" fill="rgb(235,213,38)" fg:x="1217" fg:w="43"/><text x="68.5441%" y="223.50">[l..</text></g><g><title>__libc_malloc (12 samples, 0.67%)</title><rect x="70.7071%" y="213" width="0.6734%" height="15" fill="rgb(237,122,38)" fg:x="1260" fg:w="12"/><text x="70.9571%" y="223.50"></text></g><g><title>__rdl_alloc (3 samples, 0.17%)</title><rect x="71.3805%" y="213" width="0.1684%" height="15" fill="rgb(244,218,35)" fg:x="1272" fg:w="3"/><text x="71.6305%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.17%)</title><rect x="71.3805%" y="197" width="0.1684%" height="15" fill="rgb(240,68,47)" fg:x="1272" fg:w="3"/><text x="71.6305%" y="207.50"></text></g><g><title>cfree (9 samples, 0.51%)</title><rect x="71.5488%" y="213" width="0.5051%" height="15" fill="rgb(210,16,53)" fg:x="1275" fg:w="9"/><text x="71.7988%" y="223.50"></text></g><g><title>[libc-2.31.so] (5 samples, 0.28%)</title><rect x="72.9517%" y="197" width="0.2806%" height="15" fill="rgb(235,124,12)" fg:x="1300" fg:w="5"/><text x="73.2017%" y="207.50"></text></g><g><title>__libc_malloc (11 samples, 0.62%)</title><rect x="73.2323%" y="197" width="0.6173%" height="15" fill="rgb(224,169,11)" fg:x="1305" fg:w="11"/><text x="73.4823%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="73.8496%" y="197" width="0.0561%" height="15" fill="rgb(250,166,2)" fg:x="1316" fg:w="1"/><text x="74.0996%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="73.8496%" y="181" width="0.0561%" height="15" fill="rgb(242,216,29)" fg:x="1316" fg:w="1"/><text x="74.0996%" y="191.50"></text></g><g><title>num_bigint::biguint::multiplication::&lt;impl core::ops::arith::Mul&lt;&amp;num_bigint::biguint::BigUint&gt; for &amp;num_bigint::biguint::BigUint&gt;::mul (47 samples, 2.64%)</title><rect x="72.0539%" y="213" width="2.6375%" height="15" fill="rgb(230,116,27)" fg:x="1284" fg:w="47"/><text x="72.3039%" y="223.50">nu..</text></g><g><title>num_bigint::biguint::multiplication::scalar_mul (14 samples, 0.79%)</title><rect x="73.9057%" y="197" width="0.7856%" height="15" fill="rgb(228,99,48)" fg:x="1317" fg:w="14"/><text x="74.1557%" y="207.50"></text></g><g><title>num_bigint::biguint::multiplication::&lt;impl core::ops::arith::MulAssign&lt;&amp;num_bigint::biguint::BigUint&gt; for num_bigint::biguint::BigUint&gt;::mul_assign (5 samples, 0.28%)</title><rect x="74.6914%" y="213" width="0.2806%" height="15" fill="rgb(253,11,6)" fg:x="1331" fg:w="5"/><text x="74.9414%" y="223.50"></text></g><g><title>num_bigint::biguint::BigUint::pow (207 samples, 11.62%)</title><rect x="64.0853%" y="245" width="11.6162%" height="15" fill="rgb(247,143,39)" fg:x="1142" fg:w="207"/><text x="64.3353%" y="255.50">num_bigint::bigui..</text></g><g><title>num_bigint::biguint::power::&lt;impl num_traits::pow::Pow&lt;u32&gt; for num_bigint::biguint::BigUint&gt;::pow (172 samples, 9.65%)</title><rect x="66.0494%" y="229" width="9.6521%" height="15" fill="rgb(236,97,10)" fg:x="1177" fg:w="172"/><text x="66.2994%" y="239.50">num_bigint::bi..</text></g><g><title>num_bigint::biguint::multiplication::scalar_mul (13 samples, 0.73%)</title><rect x="74.9719%" y="213" width="0.7295%" height="15" fill="rgb(233,208,19)" fg:x="1336" fg:w="13"/><text x="75.2219%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.39%)</title><rect x="75.3086%" y="197" width="0.3928%" height="15" fill="rgb(216,164,2)" fg:x="1342" fg:w="7"/><text x="75.5586%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.34%)</title><rect x="75.3648%" y="181" width="0.3367%" height="15" fill="rgb(220,129,5)" fg:x="1343" fg:w="6"/><text x="75.6148%" y="191.50"></text></g><g><title>realloc (5 samples, 0.28%)</title><rect x="75.4209%" y="165" width="0.2806%" height="15" fill="rgb(242,17,10)" fg:x="1344" fg:w="5"/><text x="75.6709%" y="175.50"></text></g><g><title>[libc-2.31.so] (4 samples, 0.22%)</title><rect x="75.4770%" y="149" width="0.2245%" height="15" fill="rgb(242,107,0)" fg:x="1345" fg:w="4"/><text x="75.7270%" y="159.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.17%)</title><rect x="75.5331%" y="133" width="0.1684%" height="15" fill="rgb(251,28,31)" fg:x="1346" fg:w="3"/><text x="75.7831%" y="143.50"></text></g><g><title>[libc-2.31.so] (20 samples, 1.12%)</title><rect x="92.3120%" y="229" width="1.1223%" height="15" fill="rgb(233,223,10)" fg:x="1645" fg:w="20"/><text x="92.5620%" y="239.50"></text></g><g><title>__libc_malloc (26 samples, 1.46%)</title><rect x="93.4343%" y="229" width="1.4590%" height="15" fill="rgb(215,21,27)" fg:x="1665" fg:w="26"/><text x="93.6843%" y="239.50"></text></g><g><title>__log2_finite (45 samples, 2.53%)</title><rect x="94.8934%" y="229" width="2.5253%" height="15" fill="rgb(232,23,21)" fg:x="1691" fg:w="45"/><text x="95.1434%" y="239.50">__..</text></g><g><title>__rdl_alloc (8 samples, 0.45%)</title><rect x="97.4186%" y="229" width="0.4489%" height="15" fill="rgb(244,5,23)" fg:x="1736" fg:w="8"/><text x="97.6686%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.45%)</title><rect x="97.4186%" y="213" width="0.4489%" height="15" fill="rgb(226,81,46)" fg:x="1736" fg:w="8"/><text x="97.6686%" y="223.50"></text></g><g><title>__rust_alloc (3 samples, 0.17%)</title><rect x="97.8676%" y="229" width="0.1684%" height="15" fill="rgb(247,70,30)" fg:x="1744" fg:w="3"/><text x="98.1176%" y="239.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="97.9798%" y="213" width="0.0561%" height="15" fill="rgb(212,68,19)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="223.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="97.9798%" y="197" width="0.0561%" height="15" fill="rgb(240,187,13)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="207.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.06%)</title><rect x="97.9798%" y="181" width="0.0561%" height="15" fill="rgb(223,113,26)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="191.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.06%)</title><rect x="97.9798%" y="165" width="0.0561%" height="15" fill="rgb(206,192,2)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="175.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.06%)</title><rect x="97.9798%" y="149" width="0.0561%" height="15" fill="rgb(241,108,4)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="159.50"></text></g><g><title>tick_sched_timer (1 samples, 0.06%)</title><rect x="97.9798%" y="133" width="0.0561%" height="15" fill="rgb(247,173,49)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="143.50"></text></g><g><title>tick_sched_handle (1 samples, 0.06%)</title><rect x="97.9798%" y="117" width="0.0561%" height="15" fill="rgb(224,114,35)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="127.50"></text></g><g><title>update_process_times (1 samples, 0.06%)</title><rect x="97.9798%" y="101" width="0.0561%" height="15" fill="rgb(245,159,27)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="111.50"></text></g><g><title>scheduler_tick (1 samples, 0.06%)</title><rect x="97.9798%" y="85" width="0.0561%" height="15" fill="rgb(245,172,44)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="95.50"></text></g><g><title>task_tick_fair (1 samples, 0.06%)</title><rect x="97.9798%" y="69" width="0.0561%" height="15" fill="rgb(236,23,11)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="79.50"></text></g><g><title>update_load_avg (1 samples, 0.06%)</title><rect x="97.9798%" y="53" width="0.0561%" height="15" fill="rgb(205,117,38)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="63.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.06%)</title><rect x="97.9798%" y="37" width="0.0561%" height="15" fill="rgb(237,72,25)" fg:x="1746" fg:w="1"/><text x="98.2298%" y="47.50"></text></g><g><title>__rust_dealloc (2 samples, 0.11%)</title><rect x="98.0359%" y="229" width="0.1122%" height="15" fill="rgb(244,70,9)" fg:x="1747" fg:w="2"/><text x="98.2859%" y="239.50"></text></g><g><title>enqueue_hrtimer (1 samples, 0.06%)</title><rect x="98.1481%" y="149" width="0.0561%" height="15" fill="rgb(217,125,39)" fg:x="1749" fg:w="1"/><text x="98.3981%" y="159.50"></text></g><g><title>timerqueue_add (1 samples, 0.06%)</title><rect x="98.1481%" y="133" width="0.0561%" height="15" fill="rgb(235,36,10)" fg:x="1749" fg:w="1"/><text x="98.3981%" y="143.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.11%)</title><rect x="98.1481%" y="229" width="0.1122%" height="15" fill="rgb(251,123,47)" fg:x="1749" fg:w="2"/><text x="98.3981%" y="239.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.11%)</title><rect x="98.1481%" y="213" width="0.1122%" height="15" fill="rgb(221,13,13)" fg:x="1749" fg:w="2"/><text x="98.3981%" y="223.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.11%)</title><rect x="98.1481%" y="197" width="0.1122%" height="15" fill="rgb(238,131,9)" fg:x="1749" fg:w="2"/><text x="98.3981%" y="207.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.11%)</title><rect x="98.1481%" y="181" width="0.1122%" height="15" fill="rgb(211,50,8)" fg:x="1749" fg:w="2"/><text x="98.3981%" y="191.50"></text></g><g><title>__hrtimer_run_queues (2 samples, 0.11%)</title><rect x="98.1481%" y="165" width="0.1122%" height="15" fill="rgb(245,182,24)" fg:x="1749" fg:w="2"/><text x="98.3981%" y="175.50"></text></g><g><title>tick_sched_timer (1 samples, 0.06%)</title><rect x="98.2043%" y="149" width="0.0561%" height="15" fill="rgb(242,14,37)" fg:x="1750" fg:w="1"/><text x="98.4543%" y="159.50"></text></g><g><title>tick_sched_handle (1 samples, 0.06%)</title><rect x="98.2043%" y="133" width="0.0561%" height="15" fill="rgb(246,228,12)" fg:x="1750" fg:w="1"/><text x="98.4543%" y="143.50"></text></g><g><title>update_process_times (1 samples, 0.06%)</title><rect x="98.2043%" y="117" width="0.0561%" height="15" fill="rgb(213,55,15)" fg:x="1750" fg:w="1"/><text x="98.4543%" y="127.50"></text></g><g><title>scheduler_tick (1 samples, 0.06%)</title><rect x="98.2043%" y="101" width="0.0561%" height="15" fill="rgb(209,9,3)" fg:x="1750" fg:w="1"/><text x="98.4543%" y="111.50"></text></g><g><title>task_tick_fair (1 samples, 0.06%)</title><rect x="98.2043%" y="85" width="0.0561%" height="15" fill="rgb(230,59,30)" fg:x="1750" fg:w="1"/><text x="98.4543%" y="95.50"></text></g><g><title>update_curr (1 samples, 0.06%)</title><rect x="98.2043%" y="69" width="0.0561%" height="15" fill="rgb(209,121,21)" fg:x="1750" fg:w="1"/><text x="98.4543%" y="79.50"></text></g><g><title>cpuacct_charge (1 samples, 0.06%)</title><rect x="98.2043%" y="53" width="0.0561%" height="15" fill="rgb(220,109,13)" fg:x="1750" fg:w="1"/><text x="98.4543%" y="63.50"></text></g><g><title>cfree (11 samples, 0.62%)</title><rect x="98.2604%" y="229" width="0.6173%" height="15" fill="rgb(232,18,1)" fg:x="1751" fg:w="11"/><text x="98.5104%" y="239.50"></text></g><g><title>_start (1,559 samples, 87.49%)</title><rect x="11.7284%" y="501" width="87.4860%" height="15" fill="rgb(215,41,42)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="511.50">_start</text></g><g><title>__libc_start_main (1,559 samples, 87.49%)</title><rect x="11.7284%" y="485" width="87.4860%" height="15" fill="rgb(224,123,36)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="495.50">__libc_start_main</text></g><g><title>main (1,559 samples, 87.49%)</title><rect x="11.7284%" y="469" width="87.4860%" height="15" fill="rgb(240,125,3)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (1,559 samples, 87.49%)</title><rect x="11.7284%" y="453" width="87.4860%" height="15" fill="rgb(205,98,50)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,559 samples, 87.49%)</title><rect x="11.7284%" y="437" width="87.4860%" height="15" fill="rgb(205,185,37)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,559 samples, 87.49%)</title><rect x="11.7284%" y="421" width="87.4860%" height="15" fill="rgb(238,207,15)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,559 samples, 87.49%)</title><rect x="11.7284%" y="405" width="87.4860%" height="15" fill="rgb(213,199,42)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="415.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,559 samples, 87.49%)</title><rect x="11.7284%" y="389" width="87.4860%" height="15" fill="rgb(235,201,11)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="399.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,559 samples, 87.49%)</title><rect x="11.7284%" y="373" width="87.4860%" height="15" fill="rgb(207,46,11)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,559 samples, 87.49%)</title><rect x="11.7284%" y="357" width="87.4860%" height="15" fill="rgb(241,35,35)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,559 samples, 87.49%)</title><rect x="11.7284%" y="341" width="87.4860%" height="15" fill="rgb(243,32,47)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="351.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,559 samples, 87.49%)</title><rect x="11.7284%" y="325" width="87.4860%" height="15" fill="rgb(247,202,23)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="335.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,559 samples, 87.49%)</title><rect x="11.7284%" y="309" width="87.4860%" height="15" fill="rgb(219,102,11)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="319.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,559 samples, 87.49%)</title><rect x="11.7284%" y="293" width="87.4860%" height="15" fill="rgb(243,110,44)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>nice_rust::main (1,559 samples, 87.49%)</title><rect x="11.7284%" y="277" width="87.4860%" height="15" fill="rgb(222,74,54)" fg:x="209" fg:w="1559"/><text x="11.9784%" y="287.50">nice_rust::main</text></g><g><title>nice_rust::get_num_uniques (1,482 samples, 83.16%)</title><rect x="16.0494%" y="261" width="83.1650%" height="15" fill="rgb(216,99,12)" fg:x="286" fg:w="1482"/><text x="16.2994%" y="271.50">nice_rust::get_num_uniques</text></g><g><title>num_bigint::biguint::convert::to_radix_le (419 samples, 23.51%)</title><rect x="75.7015%" y="245" width="23.5129%" height="15" fill="rgb(226,22,26)" fg:x="1349" fg:w="419"/><text x="75.9515%" y="255.50">num_bigint::biguint::convert::to_radi..</text></g><g><title>num_bigint::biguint::division::div_rem_digit (6 samples, 0.34%)</title><rect x="98.8777%" y="229" width="0.3367%" height="15" fill="rgb(217,163,10)" fg:x="1762" fg:w="6"/><text x="99.1277%" y="239.50"></text></g><g><title>cfree (1 samples, 0.06%)</title><rect x="99.2144%" y="501" width="0.0561%" height="15" fill="rgb(213,25,53)" fg:x="1768" fg:w="1"/><text x="99.4644%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="99.2705%" y="501" width="0.0561%" height="15" fill="rgb(252,105,26)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="511.50"></text></g><g><title>do_syscall_64 (1 samples, 0.06%)</title><rect x="99.2705%" y="485" width="0.0561%" height="15" fill="rgb(220,39,43)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="495.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.06%)</title><rect x="99.2705%" y="469" width="0.0561%" height="15" fill="rgb(229,68,48)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="479.50"></text></g><g><title>do_execveat_common (1 samples, 0.06%)</title><rect x="99.2705%" y="453" width="0.0561%" height="15" fill="rgb(252,8,32)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="463.50"></text></g><g><title>bprm_execve (1 samples, 0.06%)</title><rect x="99.2705%" y="437" width="0.0561%" height="15" fill="rgb(223,20,43)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="447.50"></text></g><g><title>load_elf_binary (1 samples, 0.06%)</title><rect x="99.2705%" y="421" width="0.0561%" height="15" fill="rgb(229,81,49)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="431.50"></text></g><g><title>setup_arg_pages (1 samples, 0.06%)</title><rect x="99.2705%" y="405" width="0.0561%" height="15" fill="rgb(236,28,36)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="415.50"></text></g><g><title>shift_arg_pages (1 samples, 0.06%)</title><rect x="99.2705%" y="389" width="0.0561%" height="15" fill="rgb(249,185,26)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="399.50"></text></g><g><title>move_page_tables.part.0 (1 samples, 0.06%)</title><rect x="99.2705%" y="373" width="0.0561%" height="15" fill="rgb(249,174,33)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="383.50"></text></g><g><title>__pmd_alloc (1 samples, 0.06%)</title><rect x="99.2705%" y="357" width="0.0561%" height="15" fill="rgb(233,201,37)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="367.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.06%)</title><rect x="99.2705%" y="341" width="0.0561%" height="15" fill="rgb(221,78,26)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="351.50"></text></g><g><title>__memcg_kmem_charge_page (1 samples, 0.06%)</title><rect x="99.2705%" y="325" width="0.0561%" height="15" fill="rgb(250,127,30)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="335.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.06%)</title><rect x="99.2705%" y="309" width="0.0561%" height="15" fill="rgb(230,49,44)" fg:x="1769" fg:w="1"/><text x="99.5205%" y="319.50"></text></g><g><title>nice-rust (1,776 samples, 99.66%)</title><rect x="0.0000%" y="517" width="99.6633%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="1776"/><text x="0.2500%" y="527.50">nice-rust</text></g><g><title>nice_rust::get_num_uniques (6 samples, 0.34%)</title><rect x="99.3266%" y="501" width="0.3367%" height="15" fill="rgb(249,83,47)" fg:x="1770" fg:w="6"/><text x="99.5766%" y="511.50"></text></g><g><title>__set_task_comm (1 samples, 0.06%)</title><rect x="99.6633%" y="389" width="0.0561%" height="15" fill="rgb(215,43,3)" fg:x="1776" fg:w="1"/><text x="99.9133%" y="399.50"></text></g><g><title>strlcpy (1 samples, 0.06%)</title><rect x="99.6633%" y="373" width="0.0561%" height="15" fill="rgb(238,154,13)" fg:x="1776" fg:w="1"/><text x="99.9133%" y="383.50"></text></g><g><title>strlen (1 samples, 0.06%)</title><rect x="99.6633%" y="357" width="0.0561%" height="15" fill="rgb(219,56,2)" fg:x="1776" fg:w="1"/><text x="99.9133%" y="367.50"></text></g><g><title>all (1,782 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="1782"/><text x="0.2500%" y="543.50"></text></g><g><title>perf_5.10 (6 samples, 0.34%)</title><rect x="99.6633%" y="517" width="0.3367%" height="15" fill="rgb(235,30,7)" fg:x="1776" fg:w="6"/><text x="99.9133%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.34%)</title><rect x="99.6633%" y="501" width="0.3367%" height="15" fill="rgb(250,79,13)" fg:x="1776" fg:w="6"/><text x="99.9133%" y="511.50"></text></g><g><title>do_syscall_64 (6 samples, 0.34%)</title><rect x="99.6633%" y="485" width="0.3367%" height="15" fill="rgb(211,146,34)" fg:x="1776" fg:w="6"/><text x="99.9133%" y="495.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.34%)</title><rect x="99.6633%" y="469" width="0.3367%" height="15" fill="rgb(228,22,38)" fg:x="1776" fg:w="6"/><text x="99.9133%" y="479.50"></text></g><g><title>do_execveat_common (6 samples, 0.34%)</title><rect x="99.6633%" y="453" width="0.3367%" height="15" fill="rgb(235,168,5)" fg:x="1776" fg:w="6"/><text x="99.9133%" y="463.50"></text></g><g><title>bprm_execve (6 samples, 0.34%)</title><rect x="99.6633%" y="437" width="0.3367%" height="15" fill="rgb(221,155,16)" fg:x="1776" fg:w="6"/><text x="99.9133%" y="447.50"></text></g><g><title>load_elf_binary (6 samples, 0.34%)</title><rect x="99.6633%" y="421" width="0.3367%" height="15" fill="rgb(215,215,53)" fg:x="1776" fg:w="6"/><text x="99.9133%" y="431.50"></text></g><g><title>begin_new_exec (6 samples, 0.34%)</title><rect x="99.6633%" y="405" width="0.3367%" height="15" fill="rgb(223,4,10)" fg:x="1776" fg:w="6"/><text x="99.9133%" y="415.50"></text></g><g><title>perf_event_exec (5 samples, 0.28%)</title><rect x="99.7194%" y="389" width="0.2806%" height="15" fill="rgb(234,103,6)" fg:x="1777" fg:w="5"/><text x="99.9694%" y="399.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.28%)</title><rect x="99.7194%" y="373" width="0.2806%" height="15" fill="rgb(227,97,0)" fg:x="1777" fg:w="5"/><text x="99.9694%" y="383.50"></text></g><g><title>native_write_msr (5 samples, 0.28%)</title><rect x="99.7194%" y="357" width="0.2806%" height="15" fill="rgb(234,150,53)" fg:x="1777" fg:w="5"/><text x="99.9694%" y="367.50"></text></g></svg></svg>